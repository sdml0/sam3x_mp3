


ARM Macro Assembler    Page 1 


    1 00000000         ;/* ***** BEGIN LICENSE BLOCK ***** 
    2 00000000         ; * Version: RCSL 1.0/RPSL 1.0 
    3 00000000         ; *  
    4 00000000         ; * Portions Copyright (c) 1995-2002 RealNetworks, Inc. 
                       All Rights Reserved. 
    5 00000000         ; *      
    6 00000000         ; * The contents of this file, and the files included wi
                       th this file, are 
    7 00000000         ; * subject to the current version of the RealNetworks P
                       ublic Source License 
    8 00000000         ; * Version 1.0 (the "RPSL") available at 
    9 00000000         ; * http://www.helixcommunity.org/content/rpsl unless yo
                       u have licensed 
   10 00000000         ; * the file under the RealNetworks Community Source Lic
                       ense Version 1.0 
   11 00000000         ; * (the "RCSL") available at http://www.helixcommunity.
                       org/content/rcsl, 
   12 00000000         ; * in which case the RCSL will apply. You may also obta
                       in the license terms 
   13 00000000         ; * directly from RealNetworks.  You may not use this fi
                       le except in 
   14 00000000         ; * compliance with the RPSL or, if you have a valid RCS
                       L with RealNetworks 
   15 00000000         ; * applicable to this file, the RCSL.  Please see the a
                       pplicable RPSL or 
   16 00000000         ; * RCSL for the rights, obligations and limitations gov
                       erning use of the 
   17 00000000         ; * contents of the file.  
   18 00000000         ; *  
   19 00000000         ; * This file is part of the Helix DNA Technology. RealN
                       etworks is the 
   20 00000000         ; * developer of the Original Code and owns the copyrigh
                       ts in the portions 
   21 00000000         ; * it created. 
   22 00000000         ; *  
   23 00000000         ; * This file, and the files included with this file, is
                        distributed and made 
   24 00000000         ; * available on an 'AS IS' basis, WITHOUT WARRANTY OF A
                       NY KIND, EITHER 
   25 00000000         ; * EXPRESS OR IMPLIED, AND REALNETWORKS HEREBY DISCLAIM
                       S ALL SUCH WARRANTIES, 
   26 00000000         ; * INCLUDING WITHOUT LIMITATION, ANY WARRANTIES OF MERC
                       HANTABILITY, FITNESS 
   27 00000000         ; * FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT OR NON-INF
                       RINGEMENT. 
   28 00000000         ; * 
   29 00000000         ; * Technology Compatibility Kit Test Suite(s) Location:
                        
   30 00000000         ; *    http://www.helixcommunity.org/content/tck 
   31 00000000         ; * 
   32 00000000         ; * Contributor(s): 
   33 00000000         ; *  
   34 00000000         ; * ***** END LICENSE BLOCK ***** */ 
   35 00000000         
   36 00000000                 AREA             |.text|, CODE, READONLY
   37 00000000         
   38 00000000        0 
                       PCM     RN               r0
   39 00000000        1 



ARM Macro Assembler    Page 2 


                       VB1     RN               r1
   40 00000000        2 
                       COEF    RN               r2
   41 00000000         
   42 00000000        0 
                       VLO     RN               r0          ; must push PCM ptr
                                                             to stack during in
                                                            ner looop
   43 00000000        3 
                       VHI     RN               r3          ; temp variable
   44 00000000         
   45 00000000        4 
                       SUM1LL  RN               r4
   46 00000000        5 
                       SUM1LH  RN               r5
   47 00000000        6 
                       SUM2LL  RN               r6
   48 00000000        7 
                       SUM2LH  RN               r7
   49 00000000        8 
                       SUM1RL  RN               r8
   50 00000000        9 
                       SUM1RH  RN               r9
   51 00000000        A 
                       SUM2RL  RN               r10
   52 00000000        B 
                       SUM2RH  RN               r11
   53 00000000         
   54 00000000        C 
                       CF1     RN               r12
   55 00000000        E 
                       CF2     RN               r14
   56 00000000         
   57 00000000        C 
                       SIGN    RN               r12         ; used for clipping
                                                             - after discarding
                                                             CF1
   58 00000000        E 
                       MAXPOS  RN               r14         ; used for clipping
                                                             - after discarding
                                                             CF2
   59 00000000         
   60 00000000        C 
                       I       RN               r12         ; overlay loop coun
                                                            ter with CF1, SIGN
   61 00000000         
   62 00000000                 GBLA             RNDVAL
   63 00000000 02000000 
                       RNDVAL  SETA             (1 << ((32 - 12) + (6 - 1)))
   64 00000000         
   65 00000000         ; C64TOS - clip 64-bit accumulator to short (no rounding
                       )
   66 00000000         ;   xl, xh = value (lo 32, hi 32)
   67 00000000         ;   input assumed to have 6 fraction bits
   68 00000000         ;   sign = temp variable to use for sign
   69 00000000         ;   maxPos = 0x00007fff (takes 2 instr. to generate - ca
                       lculating
   70 00000000         ;              once and using repeatedly saves if you do
                        several CTOS in a row)



ARM Macro Assembler    Page 3 


   71 00000000                 MACRO
   72 00000000                 C64TOS           $xl, $xh, $sign, $maxPos
   73 00000000         
   74 00000000                 mov              $xl, $xl, lsr #(20+6)
   75 00000000                 orr              $xl, $xl, $xh, lsl #(12-6)
   76 00000000                 mov              $sign, $xl, ASR #31
   77 00000000                 cmp              $sign, $xl, ASR #15
   78 00000000                 eorne            $xl, $sign, $maxPos
   79 00000000         
   80 00000000                 MEND                         ; C64TOS
   81 00000000         
   82 00000000         ; MC0S - process 2 taps, 1 sample per channel (sample 0)
                       
   83 00000000         ;   x = vb1 offset
   84 00000000                 MACRO
   85 00000000                 MC0S             $x
   86 00000000         
   87 00000000                 ldr              CF1, [COEF], #4
   88 00000000                 ldr              CF2, [COEF], #4
   89 00000000                 ldr              VLO, [VB1, #(4*($x))]
   90 00000000                 ldr              VHI, [VB1, #(4*(23 - $x))]
   91 00000000         
   92 00000000                 smlal            SUM1LL, SUM1LH, VLO, CF1
   93 00000000                 ldr              VLO, [VB1, #(4*(32 + $x))]
   94 00000000                 rsb              CF2, CF2, #0
   95 00000000                 smlal            SUM1LL, SUM1LH, VHI, CF2
   96 00000000                 ldr              VHI, [VB1, #(4*(32 + 23 - $x))]
   97 00000000         
   98 00000000                 smlal            SUM1RL, SUM1RH, VLO, CF1
   99 00000000                 smlal            SUM1RL, SUM1RH, VHI, CF2
  100 00000000         
  101 00000000                 MEND                         ; MC0S
  102 00000000         
  103 00000000         ; MC1S - process 2 taps, 1 sample per channel (sample 16
                       )
  104 00000000         ;   x = vb1 offset
  105 00000000                 MACRO
  106 00000000                 MC1S             $x
  107 00000000         
  108 00000000                 ldr              CF1, [COEF], #4
  109 00000000                 ldr              VLO, [VB1, #(4*($x))]
  110 00000000                 ldr              VHI, [VB1, #(4*(32 + $x))]
  111 00000000                 smlal            SUM1LL, SUM1LH, VLO, CF1
  112 00000000                 smlal            SUM1RL, SUM1RH, VHI, CF1
  113 00000000         
  114 00000000                 MEND                         ; MC1S
  115 00000000         
  116 00000000         ; MC2S - process 2 taps, 2 samples per channel
  117 00000000         ;   x = vb1 offset
  118 00000000                 MACRO
  119 00000000                 MC2S             $x
  120 00000000         
  121 00000000         ; load data as far as possible in advance of using it
  122 00000000                 ldr              CF1, [COEF], #4
  123 00000000                 ldr              CF2, [COEF], #4
  124 00000000                 ldr              VLO, [VB1, #(4*($x))]
  125 00000000                 ldr              VHI, [VB1, #(4*(23 - $x))]
  126 00000000         
  127 00000000                 smlal            SUM1LL, SUM1LH, VLO, CF1



ARM Macro Assembler    Page 4 


  128 00000000                 smlal            SUM2LL, SUM2LH, VLO, CF2
  129 00000000                 rsb              CF2, CF2, #0
  130 00000000                 smlal            SUM2LL, SUM2LH, VHI, CF1
  131 00000000                 smlal            SUM1LL, SUM1LH, VHI, CF2
  132 00000000         
  133 00000000                 ldr              VHI, [VB1, #(4*(32 + 23 - $x))]
  134 00000000                 ldr              VLO, [VB1, #(4*(32 + $x))]
  135 00000000         
  136 00000000                 smlal            SUM1RL, SUM1RH, VHI, CF2
  137 00000000                 smlal            SUM2RL, SUM2RH, VHI, CF1
  138 00000000                 rsb              CF2, CF2, #0
  139 00000000                 smlal            SUM1RL, SUM1RH, VLO, CF1
  140 00000000                 smlal            SUM2RL, SUM2RH, VLO, CF2
  141 00000000         
  142 00000000                 MEND                         ; MC2S
  143 00000000         
  144 00000000         ; void PolyphaseStereo(short *pcm, int *vbuf, const int 
                       *coefBase)
  145 00000000         
  146 00000000         PolyphaseStereo
                               FUNCTION
  147 00000000                 EXPORT           PolyphaseStereo
  148 00000000         
  149 00000000 E92D 4FF0       stmfd            sp!, {r4-r11, r14}
  150 00000004         
  151 00000004         ; clear out stack space for 2 local variables (4 bytes e
                       ach)
  152 00000004 B082            sub              sp, sp, #8
  153 00000006 9001            str              PCM, [sp, #4] ; sp[1] = pcm poi
                                                            nter
  154 00000008         
  155 00000008         ; special case, output sample 0
  156 00000008 F04F 7400       mov              SUM1LL, #RNDVAL ; load rndVal (
                                                            low 32)
  157 0000000C F04F 7800       mov              SUM1RL, #RNDVAL ; load rndVal (
                                                            low 32)
  158 00000010 F04F 0500       mov              SUM1LH, #0
  159 00000014 F04F 0900       mov              SUM1RH, #0
  160 00000018         
  161 00000018                 MC0S             0
   86 00000018         
   87 00000018 F852 CB04       ldr              CF1, [COEF], #4
   88 0000001C F852 EB04       ldr              CF2, [COEF], #4
   89 00000020 6808            ldr              VLO, [VB1, #(4*(0))]
   90 00000022 6DCB            ldr              VHI, [VB1, #(4*(23 - 0))]
   91 00000024         
   92 00000024 FBC0 450C       smlal            SUM1LL, SUM1LH, VLO, CF1
   93 00000028 F8D1 0080       ldr              VLO, [VB1, #(4*(32 + 0))]
   94 0000002C F1CE 0E00       rsb              CF2, CF2, #0
   95 00000030 FBC3 450E       smlal            SUM1LL, SUM1LH, VHI, CF2
   96 00000034 F8D1 30DC       ldr              VHI, [VB1, #(4*(32 + 23 - 0))]
   97 00000038         
   98 00000038 FBC0 890C       smlal            SUM1RL, SUM1RH, VLO, CF1
   99 0000003C FBC3 890E       smlal            SUM1RL, SUM1RH, VHI, CF2
  100 00000040         
  162 00000040                 MC0S             1
   86 00000040         
   87 00000040 F852 CB04       ldr              CF1, [COEF], #4
   88 00000044 F852 EB04       ldr              CF2, [COEF], #4



ARM Macro Assembler    Page 5 


   89 00000048 6848            ldr              VLO, [VB1, #(4*(1))]
   90 0000004A 6D8B            ldr              VHI, [VB1, #(4*(23 - 1))]
   91 0000004C         
   92 0000004C FBC0 450C       smlal            SUM1LL, SUM1LH, VLO, CF1
   93 00000050 F8D1 0084       ldr              VLO, [VB1, #(4*(32 + 1))]
   94 00000054 F1CE 0E00       rsb              CF2, CF2, #0
   95 00000058 FBC3 450E       smlal            SUM1LL, SUM1LH, VHI, CF2
   96 0000005C F8D1 30D8       ldr              VHI, [VB1, #(4*(32 + 23 - 1))]
   97 00000060         
   98 00000060 FBC0 890C       smlal            SUM1RL, SUM1RH, VLO, CF1
   99 00000064 FBC3 890E       smlal            SUM1RL, SUM1RH, VHI, CF2
  100 00000068         
  163 00000068                 MC0S             2
   86 00000068         
   87 00000068 F852 CB04       ldr              CF1, [COEF], #4
   88 0000006C F852 EB04       ldr              CF2, [COEF], #4
   89 00000070 6888            ldr              VLO, [VB1, #(4*(2))]
   90 00000072 6D4B            ldr              VHI, [VB1, #(4*(23 - 2))]
   91 00000074         
   92 00000074 FBC0 450C       smlal            SUM1LL, SUM1LH, VLO, CF1
   93 00000078 F8D1 0088       ldr              VLO, [VB1, #(4*(32 + 2))]
   94 0000007C F1CE 0E00       rsb              CF2, CF2, #0
   95 00000080 FBC3 450E       smlal            SUM1LL, SUM1LH, VHI, CF2
   96 00000084 F8D1 30D4       ldr              VHI, [VB1, #(4*(32 + 23 - 2))]
   97 00000088         
   98 00000088 FBC0 890C       smlal            SUM1RL, SUM1RH, VLO, CF1
   99 0000008C FBC3 890E       smlal            SUM1RL, SUM1RH, VHI, CF2
  100 00000090         
  164 00000090                 MC0S             3
   86 00000090         
   87 00000090 F852 CB04       ldr              CF1, [COEF], #4
   88 00000094 F852 EB04       ldr              CF2, [COEF], #4
   89 00000098 68C8            ldr              VLO, [VB1, #(4*(3))]
   90 0000009A 6D0B            ldr              VHI, [VB1, #(4*(23 - 3))]
   91 0000009C         
   92 0000009C FBC0 450C       smlal            SUM1LL, SUM1LH, VLO, CF1
   93 000000A0 F8D1 008C       ldr              VLO, [VB1, #(4*(32 + 3))]
   94 000000A4 F1CE 0E00       rsb              CF2, CF2, #0
   95 000000A8 FBC3 450E       smlal            SUM1LL, SUM1LH, VHI, CF2
   96 000000AC F8D1 30D0       ldr              VHI, [VB1, #(4*(32 + 23 - 3))]
   97 000000B0         
   98 000000B0 FBC0 890C       smlal            SUM1RL, SUM1RH, VLO, CF1
   99 000000B4 FBC3 890E       smlal            SUM1RL, SUM1RH, VHI, CF2
  100 000000B8         
  165 000000B8                 MC0S             4
   86 000000B8         
   87 000000B8 F852 CB04       ldr              CF1, [COEF], #4
   88 000000BC F852 EB04       ldr              CF2, [COEF], #4
   89 000000C0 6908            ldr              VLO, [VB1, #(4*(4))]
   90 000000C2 6CCB            ldr              VHI, [VB1, #(4*(23 - 4))]
   91 000000C4         
   92 000000C4 FBC0 450C       smlal            SUM1LL, SUM1LH, VLO, CF1
   93 000000C8 F8D1 0090       ldr              VLO, [VB1, #(4*(32 + 4))]
   94 000000CC F1CE 0E00       rsb              CF2, CF2, #0
   95 000000D0 FBC3 450E       smlal            SUM1LL, SUM1LH, VHI, CF2
   96 000000D4 F8D1 30CC       ldr              VHI, [VB1, #(4*(32 + 23 - 4))]
   97 000000D8         
   98 000000D8 FBC0 890C       smlal            SUM1RL, SUM1RH, VLO, CF1
   99 000000DC FBC3 890E       smlal            SUM1RL, SUM1RH, VHI, CF2



ARM Macro Assembler    Page 6 


  100 000000E0         
  166 000000E0                 MC0S             5
   86 000000E0         
   87 000000E0 F852 CB04       ldr              CF1, [COEF], #4
   88 000000E4 F852 EB04       ldr              CF2, [COEF], #4
   89 000000E8 6948            ldr              VLO, [VB1, #(4*(5))]
   90 000000EA 6C8B            ldr              VHI, [VB1, #(4*(23 - 5))]
   91 000000EC         
   92 000000EC FBC0 450C       smlal            SUM1LL, SUM1LH, VLO, CF1
   93 000000F0 F8D1 0094       ldr              VLO, [VB1, #(4*(32 + 5))]
   94 000000F4 F1CE 0E00       rsb              CF2, CF2, #0
   95 000000F8 FBC3 450E       smlal            SUM1LL, SUM1LH, VHI, CF2
   96 000000FC F8D1 30C8       ldr              VHI, [VB1, #(4*(32 + 23 - 5))]
   97 00000100         
   98 00000100 FBC0 890C       smlal            SUM1RL, SUM1RH, VLO, CF1
   99 00000104 FBC3 890E       smlal            SUM1RL, SUM1RH, VHI, CF2
  100 00000108         
  167 00000108                 MC0S             6
   86 00000108         
   87 00000108 F852 CB04       ldr              CF1, [COEF], #4
   88 0000010C F852 EB04       ldr              CF2, [COEF], #4
   89 00000110 6988            ldr              VLO, [VB1, #(4*(6))]
   90 00000112 6C4B            ldr              VHI, [VB1, #(4*(23 - 6))]
   91 00000114         
   92 00000114 FBC0 450C       smlal            SUM1LL, SUM1LH, VLO, CF1
   93 00000118 F8D1 0098       ldr              VLO, [VB1, #(4*(32 + 6))]
   94 0000011C F1CE 0E00       rsb              CF2, CF2, #0
   95 00000120 FBC3 450E       smlal            SUM1LL, SUM1LH, VHI, CF2
   96 00000124 F8D1 30C4       ldr              VHI, [VB1, #(4*(32 + 23 - 6))]
   97 00000128         
   98 00000128 FBC0 890C       smlal            SUM1RL, SUM1RH, VLO, CF1
   99 0000012C FBC3 890E       smlal            SUM1RL, SUM1RH, VHI, CF2
  100 00000130         
  168 00000130                 MC0S             7
   86 00000130         
   87 00000130 F852 CB04       ldr              CF1, [COEF], #4
   88 00000134 F852 EB04       ldr              CF2, [COEF], #4
   89 00000138 69C8            ldr              VLO, [VB1, #(4*(7))]
   90 0000013A 6C0B            ldr              VHI, [VB1, #(4*(23 - 7))]
   91 0000013C         
   92 0000013C FBC0 450C       smlal            SUM1LL, SUM1LH, VLO, CF1
   93 00000140 F8D1 009C       ldr              VLO, [VB1, #(4*(32 + 7))]
   94 00000144 F1CE 0E00       rsb              CF2, CF2, #0
   95 00000148 FBC3 450E       smlal            SUM1LL, SUM1LH, VHI, CF2
   96 0000014C F8D1 30C0       ldr              VHI, [VB1, #(4*(32 + 23 - 7))]
   97 00000150         
   98 00000150 FBC0 890C       smlal            SUM1RL, SUM1RH, VLO, CF1
   99 00000154 FBC3 890E       smlal            SUM1RL, SUM1RH, VHI, CF2
  100 00000158         
  169 00000158         
  170 00000158 9801            ldr              PCM, [sp, #4] 
                                                            ; load pcm pointer
  171 0000015A F44F 4EFE       mov              MAXPOS, #0x7f00
  172 0000015E F04E 0EFF       orr              MAXPOS, MAXPOS, #0xff
  173 00000162         
  174 00000162                 C64TOS           SUM1LL, SUM1LH, SIGN, MAXPOS
   73 00000162         
   74 00000162 EA4F 6494       mov              SUM1LL, SUM1LL, lsr #(20+6)
   75 00000166 EA44 1485       orr              SUM1LL, SUM1LL, SUM1LH, lsl #(1



ARM Macro Assembler    Page 7 


2-6)
   76 0000016A EA4F 7CE4       mov              SIGN, SUM1LL, ASR #31
   77 0000016E EBBC 3FE4       cmp              SIGN, SUM1LL, ASR #15
   78 00000172 BF18 EA8C 
              040E             eorne            SUM1LL, SIGN, MAXPOS
   79 00000178         
  175 00000178                 C64TOS           SUM1RL, SUM1RH, SIGN, MAXPOS
   73 00000178         
   74 00000178 EA4F 6898       mov              SUM1RL, SUM1RL, lsr #(20+6)
   75 0000017C EA48 1889       orr              SUM1RL, SUM1RL, SUM1RH, lsl #(1
2-6)
   76 00000180 EA4F 7CE8       mov              SIGN, SUM1RL, ASR #31
   77 00000184 EBBC 3FE8       cmp              SIGN, SUM1RL, ASR #15
   78 00000188 BF18 EA8C 
              080E             eorne            SUM1RL, SIGN, MAXPOS
   79 0000018E         
  176 0000018E         
  177 0000018E 8004            strh             SUM1LL, [PCM, #(2*0)]
  178 00000190 F8A0 8002       strh             SUM1RL, [PCM, #(2*1)]
  179 00000194         
  180 00000194         ; special case, output sample 16
  181 00000194 F502 7270       add              COEF, COEF, #(4*(256-16)) ; coe
                                                            f = coefBase + 256 
                                                            (was coefBase + 16 
                                                            after MC0S block)
  182 00000198 F501 5180       add              VB1, VB1, #(4*1024) ; vb1 = vbu
                                                            f + 64*16
  183 0000019C         
  184 0000019C F04F 7400       mov              SUM1LL, #RNDVAL ; load rndVal (
                                                            low 32)
  185 000001A0 F04F 7800       mov              SUM1RL, #RNDVAL ; load rndVal (
                                                            low 32)
  186 000001A4 F04F 0500       mov              SUM1LH, #0
  187 000001A8 F04F 0900       mov              SUM1RH, #0
  188 000001AC         
  189 000001AC                 MC1S             0
  107 000001AC         
  108 000001AC F852 CB04       ldr              CF1, [COEF], #4
  109 000001B0 6808            ldr              VLO, [VB1, #(4*(0))]
  110 000001B2 F8D1 3080       ldr              VHI, [VB1, #(4*(32 + 0))]
  111 000001B6 FBC0 450C       smlal            SUM1LL, SUM1LH, VLO, CF1
  112 000001BA FBC3 890C       smlal            SUM1RL, SUM1RH, VHI, CF1
  113 000001BE         
  190 000001BE                 MC1S             1
  107 000001BE         
  108 000001BE F852 CB04       ldr              CF1, [COEF], #4
  109 000001C2 6848            ldr              VLO, [VB1, #(4*(1))]
  110 000001C4 F8D1 3084       ldr              VHI, [VB1, #(4*(32 + 1))]
  111 000001C8 FBC0 450C       smlal            SUM1LL, SUM1LH, VLO, CF1
  112 000001CC FBC3 890C       smlal            SUM1RL, SUM1RH, VHI, CF1
  113 000001D0         
  191 000001D0                 MC1S             2
  107 000001D0         
  108 000001D0 F852 CB04       ldr              CF1, [COEF], #4
  109 000001D4 6888            ldr              VLO, [VB1, #(4*(2))]
  110 000001D6 F8D1 3088       ldr              VHI, [VB1, #(4*(32 + 2))]
  111 000001DA FBC0 450C       smlal            SUM1LL, SUM1LH, VLO, CF1
  112 000001DE FBC3 890C       smlal            SUM1RL, SUM1RH, VHI, CF1
  113 000001E2         



ARM Macro Assembler    Page 8 


  192 000001E2                 MC1S             3
  107 000001E2         
  108 000001E2 F852 CB04       ldr              CF1, [COEF], #4
  109 000001E6 68C8            ldr              VLO, [VB1, #(4*(3))]
  110 000001E8 F8D1 308C       ldr              VHI, [VB1, #(4*(32 + 3))]
  111 000001EC FBC0 450C       smlal            SUM1LL, SUM1LH, VLO, CF1
  112 000001F0 FBC3 890C       smlal            SUM1RL, SUM1RH, VHI, CF1
  113 000001F4         
  193 000001F4                 MC1S             4
  107 000001F4         
  108 000001F4 F852 CB04       ldr              CF1, [COEF], #4
  109 000001F8 6908            ldr              VLO, [VB1, #(4*(4))]
  110 000001FA F8D1 3090       ldr              VHI, [VB1, #(4*(32 + 4))]
  111 000001FE FBC0 450C       smlal            SUM1LL, SUM1LH, VLO, CF1
  112 00000202 FBC3 890C       smlal            SUM1RL, SUM1RH, VHI, CF1
  113 00000206         
  194 00000206                 MC1S             5
  107 00000206         
  108 00000206 F852 CB04       ldr              CF1, [COEF], #4
  109 0000020A 6948            ldr              VLO, [VB1, #(4*(5))]
  110 0000020C F8D1 3094       ldr              VHI, [VB1, #(4*(32 + 5))]
  111 00000210 FBC0 450C       smlal            SUM1LL, SUM1LH, VLO, CF1
  112 00000214 FBC3 890C       smlal            SUM1RL, SUM1RH, VHI, CF1
  113 00000218         
  195 00000218                 MC1S             6
  107 00000218         
  108 00000218 F852 CB04       ldr              CF1, [COEF], #4
  109 0000021C 6988            ldr              VLO, [VB1, #(4*(6))]
  110 0000021E F8D1 3098       ldr              VHI, [VB1, #(4*(32 + 6))]
  111 00000222 FBC0 450C       smlal            SUM1LL, SUM1LH, VLO, CF1
  112 00000226 FBC3 890C       smlal            SUM1RL, SUM1RH, VHI, CF1
  113 0000022A         
  196 0000022A                 MC1S             7
  107 0000022A         
  108 0000022A F852 CB04       ldr              CF1, [COEF], #4
  109 0000022E 69C8            ldr              VLO, [VB1, #(4*(7))]
  110 00000230 F8D1 309C       ldr              VHI, [VB1, #(4*(32 + 7))]
  111 00000234 FBC0 450C       smlal            SUM1LL, SUM1LH, VLO, CF1
  112 00000238 FBC3 890C       smlal            SUM1RL, SUM1RH, VHI, CF1
  113 0000023C         
  197 0000023C         
  198 0000023C 9801            ldr              PCM, [sp, #4] 
                                                            ; load pcm pointer
  199 0000023E F44F 4EFE       mov              MAXPOS, #0x7f00
  200 00000242 F04E 0EFF       orr              MAXPOS, MAXPOS, #0xff
  201 00000246         
  202 00000246                 C64TOS           SUM1LL, SUM1LH, SIGN, MAXPOS
   73 00000246         
   74 00000246 EA4F 6494       mov              SUM1LL, SUM1LL, lsr #(20+6)
   75 0000024A EA44 1485       orr              SUM1LL, SUM1LL, SUM1LH, lsl #(1
2-6)
   76 0000024E EA4F 7CE4       mov              SIGN, SUM1LL, ASR #31
   77 00000252 EBBC 3FE4       cmp              SIGN, SUM1LL, ASR #15
   78 00000256 BF18 EA8C 
              040E             eorne            SUM1LL, SIGN, MAXPOS
   79 0000025C         
  203 0000025C                 C64TOS           SUM1RL, SUM1RH, SIGN, MAXPOS
   73 0000025C         
   74 0000025C EA4F 6898       mov              SUM1RL, SUM1RL, lsr #(20+6)



ARM Macro Assembler    Page 9 


   75 00000260 EA48 1889       orr              SUM1RL, SUM1RL, SUM1RH, lsl #(1
2-6)
   76 00000264 EA4F 7CE8       mov              SIGN, SUM1RL, ASR #31
   77 00000268 EBBC 3FE8       cmp              SIGN, SUM1RL, ASR #15
   78 0000026C BF18 EA8C 
              080E             eorne            SUM1RL, SIGN, MAXPOS
   79 00000272         
  204 00000272         
  205 00000272 F8A0 4040       strh             SUM1LL, [PCM, #(2*(2*16+0))]
  206 00000276 F8A0 8042       strh             SUM1RL, [PCM, #(2*(2*16+1))]
  207 0000027A         
  208 0000027A         ; main convolution loop: sum1L = samples 1, 2, 3, ... 15
                          sum2L = samples 31, 30, ... 17
  209 0000027A F5A2 7278       sub              COEF, COEF, #(4*(264-16)) ; coe
                                                            f = coefBase + 16 (
                                                            was coefBase + 264 
                                                            after MC1S block)
  210 0000027E F5A1 6170       sub              VB1, VB1, #(4*(1024-64)) ; vb1 
                                                            = vbuf + 64 (was vb
                                                            uf + 64*16 after MC
                                                            1S block)
  211 00000282 F04F 0C0F       mov              I, #15      ; loop counter, cou
                                                            nt down
  212 00000286 F100 0004       add              PCM, PCM, #(2*2) ; pcm+=2
  213 0000028A         
  214 0000028A         LoopPS
  215 0000028A F8CD C000       str              I, [sp, #0] ; sp[0] = i (loop c
                                                            ounter)
  216 0000028E 9001            str              PCM, [sp, #4] ; sp[1] = pcm (po
                                                            inter to pcm buffer
                                                            )
  217 00000290         
  218 00000290 F04F 7400       mov              SUM1LL, #RNDVAL ; load rndVal (
                                                            low 32)
  219 00000294 F04F 7800       mov              SUM1RL, #RNDVAL ; load rndVal (
                                                            low 32)
  220 00000298 F04F 7600       mov              SUM2LL, #RNDVAL ; load rndVal (
                                                            low 32)
  221 0000029C F04F 7A00       mov              SUM2RL, #RNDVAL ; load rndVal (
                                                            low 32)
  222 000002A0         
  223 000002A0 F04F 0500       mov              SUM1LH, #0
  224 000002A4 F04F 0900       mov              SUM1RH, #0
  225 000002A8 F04F 0700       mov              SUM2LH, #0
  226 000002AC F04F 0B00       mov              SUM2RH, #0
  227 000002B0         
  228 000002B0                 MC2S             0
  120 000002B0         
  121 000002B0         ; load data as far as possible in advance of using it
  122 000002B0 F852 CB04       ldr              CF1, [COEF], #4
  123 000002B4 F852 EB04       ldr              CF2, [COEF], #4
  124 000002B8 6808            ldr              VLO, [VB1, #(4*(0))]
  125 000002BA 6DCB            ldr              VHI, [VB1, #(4*(23 - 0))]
  126 000002BC         
  127 000002BC FBC0 450C       smlal            SUM1LL, SUM1LH, VLO, CF1
  128 000002C0 FBC0 670E       smlal            SUM2LL, SUM2LH, VLO, CF2
  129 000002C4 F1CE 0E00       rsb              CF2, CF2, #0
  130 000002C8 FBC3 670C       smlal            SUM2LL, SUM2LH, VHI, CF1
  131 000002CC FBC3 450E       smlal            SUM1LL, SUM1LH, VHI, CF2



ARM Macro Assembler    Page 10 


  132 000002D0         
  133 000002D0 F8D1 30DC       ldr              VHI, [VB1, #(4*(32 + 23 - 0))]
  134 000002D4 F8D1 0080       ldr              VLO, [VB1, #(4*(32 + 0))]
  135 000002D8         
  136 000002D8 FBC3 890E       smlal            SUM1RL, SUM1RH, VHI, CF2
  137 000002DC FBC3 AB0C       smlal            SUM2RL, SUM2RH, VHI, CF1
  138 000002E0 F1CE 0E00       rsb              CF2, CF2, #0
  139 000002E4 FBC0 890C       smlal            SUM1RL, SUM1RH, VLO, CF1
  140 000002E8 FBC0 AB0E       smlal            SUM2RL, SUM2RH, VLO, CF2
  141 000002EC         
  229 000002EC                 MC2S             1
  120 000002EC         
  121 000002EC         ; load data as far as possible in advance of using it
  122 000002EC F852 CB04       ldr              CF1, [COEF], #4
  123 000002F0 F852 EB04       ldr              CF2, [COEF], #4
  124 000002F4 6848            ldr              VLO, [VB1, #(4*(1))]
  125 000002F6 6D8B            ldr              VHI, [VB1, #(4*(23 - 1))]
  126 000002F8         
  127 000002F8 FBC0 450C       smlal            SUM1LL, SUM1LH, VLO, CF1
  128 000002FC FBC0 670E       smlal            SUM2LL, SUM2LH, VLO, CF2
  129 00000300 F1CE 0E00       rsb              CF2, CF2, #0
  130 00000304 FBC3 670C       smlal            SUM2LL, SUM2LH, VHI, CF1
  131 00000308 FBC3 450E       smlal            SUM1LL, SUM1LH, VHI, CF2
  132 0000030C         
  133 0000030C F8D1 30D8       ldr              VHI, [VB1, #(4*(32 + 23 - 1))]
  134 00000310 F8D1 0084       ldr              VLO, [VB1, #(4*(32 + 1))]
  135 00000314         
  136 00000314 FBC3 890E       smlal            SUM1RL, SUM1RH, VHI, CF2
  137 00000318 FBC3 AB0C       smlal            SUM2RL, SUM2RH, VHI, CF1
  138 0000031C F1CE 0E00       rsb              CF2, CF2, #0
  139 00000320 FBC0 890C       smlal            SUM1RL, SUM1RH, VLO, CF1
  140 00000324 FBC0 AB0E       smlal            SUM2RL, SUM2RH, VLO, CF2
  141 00000328         
  230 00000328                 MC2S             2
  120 00000328         
  121 00000328         ; load data as far as possible in advance of using it
  122 00000328 F852 CB04       ldr              CF1, [COEF], #4
  123 0000032C F852 EB04       ldr              CF2, [COEF], #4
  124 00000330 6888            ldr              VLO, [VB1, #(4*(2))]
  125 00000332 6D4B            ldr              VHI, [VB1, #(4*(23 - 2))]
  126 00000334         
  127 00000334 FBC0 450C       smlal            SUM1LL, SUM1LH, VLO, CF1
  128 00000338 FBC0 670E       smlal            SUM2LL, SUM2LH, VLO, CF2
  129 0000033C F1CE 0E00       rsb              CF2, CF2, #0
  130 00000340 FBC3 670C       smlal            SUM2LL, SUM2LH, VHI, CF1
  131 00000344 FBC3 450E       smlal            SUM1LL, SUM1LH, VHI, CF2
  132 00000348         
  133 00000348 F8D1 30D4       ldr              VHI, [VB1, #(4*(32 + 23 - 2))]
  134 0000034C F8D1 0088       ldr              VLO, [VB1, #(4*(32 + 2))]
  135 00000350         
  136 00000350 FBC3 890E       smlal            SUM1RL, SUM1RH, VHI, CF2
  137 00000354 FBC3 AB0C       smlal            SUM2RL, SUM2RH, VHI, CF1
  138 00000358 F1CE 0E00       rsb              CF2, CF2, #0
  139 0000035C FBC0 890C       smlal            SUM1RL, SUM1RH, VLO, CF1
  140 00000360 FBC0 AB0E       smlal            SUM2RL, SUM2RH, VLO, CF2
  141 00000364         
  231 00000364                 MC2S             3
  120 00000364         
  121 00000364         ; load data as far as possible in advance of using it



ARM Macro Assembler    Page 11 


  122 00000364 F852 CB04       ldr              CF1, [COEF], #4
  123 00000368 F852 EB04       ldr              CF2, [COEF], #4
  124 0000036C 68C8            ldr              VLO, [VB1, #(4*(3))]
  125 0000036E 6D0B            ldr              VHI, [VB1, #(4*(23 - 3))]
  126 00000370         
  127 00000370 FBC0 450C       smlal            SUM1LL, SUM1LH, VLO, CF1
  128 00000374 FBC0 670E       smlal            SUM2LL, SUM2LH, VLO, CF2
  129 00000378 F1CE 0E00       rsb              CF2, CF2, #0
  130 0000037C FBC3 670C       smlal            SUM2LL, SUM2LH, VHI, CF1
  131 00000380 FBC3 450E       smlal            SUM1LL, SUM1LH, VHI, CF2
  132 00000384         
  133 00000384 F8D1 30D0       ldr              VHI, [VB1, #(4*(32 + 23 - 3))]
  134 00000388 F8D1 008C       ldr              VLO, [VB1, #(4*(32 + 3))]
  135 0000038C         
  136 0000038C FBC3 890E       smlal            SUM1RL, SUM1RH, VHI, CF2
  137 00000390 FBC3 AB0C       smlal            SUM2RL, SUM2RH, VHI, CF1
  138 00000394 F1CE 0E00       rsb              CF2, CF2, #0
  139 00000398 FBC0 890C       smlal            SUM1RL, SUM1RH, VLO, CF1
  140 0000039C FBC0 AB0E       smlal            SUM2RL, SUM2RH, VLO, CF2
  141 000003A0         
  232 000003A0                 MC2S             4
  120 000003A0         
  121 000003A0         ; load data as far as possible in advance of using it
  122 000003A0 F852 CB04       ldr              CF1, [COEF], #4
  123 000003A4 F852 EB04       ldr              CF2, [COEF], #4
  124 000003A8 6908            ldr              VLO, [VB1, #(4*(4))]
  125 000003AA 6CCB            ldr              VHI, [VB1, #(4*(23 - 4))]
  126 000003AC         
  127 000003AC FBC0 450C       smlal            SUM1LL, SUM1LH, VLO, CF1
  128 000003B0 FBC0 670E       smlal            SUM2LL, SUM2LH, VLO, CF2
  129 000003B4 F1CE 0E00       rsb              CF2, CF2, #0
  130 000003B8 FBC3 670C       smlal            SUM2LL, SUM2LH, VHI, CF1
  131 000003BC FBC3 450E       smlal            SUM1LL, SUM1LH, VHI, CF2
  132 000003C0         
  133 000003C0 F8D1 30CC       ldr              VHI, [VB1, #(4*(32 + 23 - 4))]
  134 000003C4 F8D1 0090       ldr              VLO, [VB1, #(4*(32 + 4))]
  135 000003C8         
  136 000003C8 FBC3 890E       smlal            SUM1RL, SUM1RH, VHI, CF2
  137 000003CC FBC3 AB0C       smlal            SUM2RL, SUM2RH, VHI, CF1
  138 000003D0 F1CE 0E00       rsb              CF2, CF2, #0
  139 000003D4 FBC0 890C       smlal            SUM1RL, SUM1RH, VLO, CF1
  140 000003D8 FBC0 AB0E       smlal            SUM2RL, SUM2RH, VLO, CF2
  141 000003DC         
  233 000003DC                 MC2S             5
  120 000003DC         
  121 000003DC         ; load data as far as possible in advance of using it
  122 000003DC F852 CB04       ldr              CF1, [COEF], #4
  123 000003E0 F852 EB04       ldr              CF2, [COEF], #4
  124 000003E4 6948            ldr              VLO, [VB1, #(4*(5))]
  125 000003E6 6C8B            ldr              VHI, [VB1, #(4*(23 - 5))]
  126 000003E8         
  127 000003E8 FBC0 450C       smlal            SUM1LL, SUM1LH, VLO, CF1
  128 000003EC FBC0 670E       smlal            SUM2LL, SUM2LH, VLO, CF2
  129 000003F0 F1CE 0E00       rsb              CF2, CF2, #0
  130 000003F4 FBC3 670C       smlal            SUM2LL, SUM2LH, VHI, CF1
  131 000003F8 FBC3 450E       smlal            SUM1LL, SUM1LH, VHI, CF2
  132 000003FC         
  133 000003FC F8D1 30C8       ldr              VHI, [VB1, #(4*(32 + 23 - 5))]
  134 00000400 F8D1 0094       ldr              VLO, [VB1, #(4*(32 + 5))]



ARM Macro Assembler    Page 12 


  135 00000404         
  136 00000404 FBC3 890E       smlal            SUM1RL, SUM1RH, VHI, CF2
  137 00000408 FBC3 AB0C       smlal            SUM2RL, SUM2RH, VHI, CF1
  138 0000040C F1CE 0E00       rsb              CF2, CF2, #0
  139 00000410 FBC0 890C       smlal            SUM1RL, SUM1RH, VLO, CF1
  140 00000414 FBC0 AB0E       smlal            SUM2RL, SUM2RH, VLO, CF2
  141 00000418         
  234 00000418                 MC2S             6
  120 00000418         
  121 00000418         ; load data as far as possible in advance of using it
  122 00000418 F852 CB04       ldr              CF1, [COEF], #4
  123 0000041C F852 EB04       ldr              CF2, [COEF], #4
  124 00000420 6988            ldr              VLO, [VB1, #(4*(6))]
  125 00000422 6C4B            ldr              VHI, [VB1, #(4*(23 - 6))]
  126 00000424         
  127 00000424 FBC0 450C       smlal            SUM1LL, SUM1LH, VLO, CF1
  128 00000428 FBC0 670E       smlal            SUM2LL, SUM2LH, VLO, CF2
  129 0000042C F1CE 0E00       rsb              CF2, CF2, #0
  130 00000430 FBC3 670C       smlal            SUM2LL, SUM2LH, VHI, CF1
  131 00000434 FBC3 450E       smlal            SUM1LL, SUM1LH, VHI, CF2
  132 00000438         
  133 00000438 F8D1 30C4       ldr              VHI, [VB1, #(4*(32 + 23 - 6))]
  134 0000043C F8D1 0098       ldr              VLO, [VB1, #(4*(32 + 6))]
  135 00000440         
  136 00000440 FBC3 890E       smlal            SUM1RL, SUM1RH, VHI, CF2
  137 00000444 FBC3 AB0C       smlal            SUM2RL, SUM2RH, VHI, CF1
  138 00000448 F1CE 0E00       rsb              CF2, CF2, #0
  139 0000044C FBC0 890C       smlal            SUM1RL, SUM1RH, VLO, CF1
  140 00000450 FBC0 AB0E       smlal            SUM2RL, SUM2RH, VLO, CF2
  141 00000454         
  235 00000454                 MC2S             7
  120 00000454         
  121 00000454         ; load data as far as possible in advance of using it
  122 00000454 F852 CB04       ldr              CF1, [COEF], #4
  123 00000458 F852 EB04       ldr              CF2, [COEF], #4
  124 0000045C 69C8            ldr              VLO, [VB1, #(4*(7))]
  125 0000045E 6C0B            ldr              VHI, [VB1, #(4*(23 - 7))]
  126 00000460         
  127 00000460 FBC0 450C       smlal            SUM1LL, SUM1LH, VLO, CF1
  128 00000464 FBC0 670E       smlal            SUM2LL, SUM2LH, VLO, CF2
  129 00000468 F1CE 0E00       rsb              CF2, CF2, #0
  130 0000046C FBC3 670C       smlal            SUM2LL, SUM2LH, VHI, CF1
  131 00000470 FBC3 450E       smlal            SUM1LL, SUM1LH, VHI, CF2
  132 00000474         
  133 00000474 F8D1 30C0       ldr              VHI, [VB1, #(4*(32 + 23 - 7))]
  134 00000478 F8D1 009C       ldr              VLO, [VB1, #(4*(32 + 7))]
  135 0000047C         
  136 0000047C FBC3 890E       smlal            SUM1RL, SUM1RH, VHI, CF2
  137 00000480 FBC3 AB0C       smlal            SUM2RL, SUM2RH, VHI, CF1
  138 00000484 F1CE 0E00       rsb              CF2, CF2, #0
  139 00000488 FBC0 890C       smlal            SUM1RL, SUM1RH, VLO, CF1
  140 0000048C FBC0 AB0E       smlal            SUM2RL, SUM2RH, VLO, CF2
  141 00000490         
  236 00000490         
  237 00000490 F501 7180       add              VB1, VB1, #(4*64) ; vb1 += 64
  238 00000494         
  239 00000494 9801            ldr              PCM, [sp, #4] 
                                                            ; load pcm pointer
  240 00000496 F44F 4EFE       mov              MAXPOS, #0x7f00



ARM Macro Assembler    Page 13 


  241 0000049A F04E 0EFF       orr              MAXPOS, MAXPOS, #0xff
  242 0000049E         
  243 0000049E                 C64TOS           SUM1LL, SUM1LH, SIGN, MAXPOS
   73 0000049E         
   74 0000049E EA4F 6494       mov              SUM1LL, SUM1LL, lsr #(20+6)
   75 000004A2 EA44 1485       orr              SUM1LL, SUM1LL, SUM1LH, lsl #(1
2-6)
   76 000004A6 EA4F 7CE4       mov              SIGN, SUM1LL, ASR #31
   77 000004AA EBBC 3FE4       cmp              SIGN, SUM1LL, ASR #15
   78 000004AE BF18 EA8C 
              040E             eorne            SUM1LL, SIGN, MAXPOS
   79 000004B4         
  244 000004B4                 C64TOS           SUM1RL, SUM1RH, SIGN, MAXPOS
   73 000004B4         
   74 000004B4 EA4F 6898       mov              SUM1RL, SUM1RL, lsr #(20+6)
   75 000004B8 EA48 1889       orr              SUM1RL, SUM1RL, SUM1RH, lsl #(1
2-6)
   76 000004BC EA4F 7CE8       mov              SIGN, SUM1RL, ASR #31
   77 000004C0 EBBC 3FE8       cmp              SIGN, SUM1RL, ASR #15
   78 000004C4 BF18 EA8C 
              080E             eorne            SUM1RL, SIGN, MAXPOS
   79 000004CA         
  245 000004CA                 C64TOS           SUM2LL, SUM2LH, SIGN, MAXPOS
   73 000004CA         
   74 000004CA EA4F 6696       mov              SUM2LL, SUM2LL, lsr #(20+6)
   75 000004CE EA46 1687       orr              SUM2LL, SUM2LL, SUM2LH, lsl #(1
2-6)
   76 000004D2 EA4F 7CE6       mov              SIGN, SUM2LL, ASR #31
   77 000004D6 EBBC 3FE6       cmp              SIGN, SUM2LL, ASR #15
   78 000004DA BF18 EA8C 
              060E             eorne            SUM2LL, SIGN, MAXPOS
   79 000004E0         
  246 000004E0                 C64TOS           SUM2RL, SUM2RH, SIGN, MAXPOS
   73 000004E0         
   74 000004E0 EA4F 6A9A       mov              SUM2RL, SUM2RL, lsr #(20+6)
   75 000004E4 EA4A 1A8B       orr              SUM2RL, SUM2RL, SUM2RH, lsl #(1
2-6)
   76 000004E8 EA4F 7CEA       mov              SIGN, SUM2RL, ASR #31
   77 000004EC EBBC 3FEA       cmp              SIGN, SUM2RL, ASR #15
   78 000004F0 BF18 EA8C 
              0A0E             eorne            SUM2RL, SIGN, MAXPOS
   79 000004F6         
  247 000004F6         
  248 000004F6 F8DD C000       ldr              I, [sp, #0] ; load loop counter
                                                            
  249 000004FA EB00 0ECC       add              CF2, PCM, I, lsl #3 ; CF2 = PCM
                                                             + 4*i (short offse
                                                            t)
  250 000004FE F82E 6B02       strh             SUM2LL, [CF2], #2 ; *(pcm + 2*2
                                                            *i + 0)
  251 00000502 F82E AB02       strh             SUM2RL, [CF2], #2 ; *(pcm + 2*2
                                                            *i + 1)
  252 00000506         
  253 00000506 F820 4B02       strh             SUM1LL, [PCM], #2 ; *(pcm + 0)
  254 0000050A F820 8B02       strh             SUM1RL, [PCM], #2 ; *(pcm + 1)
  255 0000050E         
  256 0000050E F1BC 0C01       subs             I, I, #1
  257 00000512 F47F AEBA       bne              LoopPS
  258 00000516         



ARM Macro Assembler    Page 14 


  259 00000516         ; restore stack pointer
  260 00000516 B002            add              sp, sp, #8
  261 00000518         
  262 00000518 E8BD 8FF0       ldmfd            sp!, {r4-r11, pc}
  263 0000051C                 ENDFUNC
  264 0000051C         
  265 0000051C         ;; MONO PROCESSING
  266 0000051C         
  267 0000051C         ; MC0M - process 2 taps, 1 sample (sample 0)
  268 0000051C         ;   x = vb1 offset
  269 0000051C                 MACRO
  270 0000051C                 MC0M             $x
  271 0000051C         
  272 0000051C                 ldr              CF1, [COEF], #4
  273 0000051C                 ldr              CF2, [COEF], #4
  274 0000051C                 ldr              VLO, [VB1, #(4*($x))]
  275 0000051C                 ldr              VHI, [VB1, #(4*(23 - $x))]
  276 0000051C         
  277 0000051C                 rsb              CF2, CF2, #0
  278 0000051C                 smlal            SUM1LL, SUM1LH, VLO, CF1
  279 0000051C                 smlal            SUM1LL, SUM1LH, VHI, CF2
  280 0000051C         
  281 0000051C                 MEND                         ; MC0M
  282 0000051C         
  283 0000051C         ; MC1M - process 2 taps, 1 sample (sample 16)
  284 0000051C         ;   x = vb1 offset
  285 0000051C                 MACRO
  286 0000051C                 MC1M             $x
  287 0000051C         
  288 0000051C                 ldr              CF1, [COEF], #4
  289 0000051C                 ldr              VLO, [VB1, #(4*($x))]
  290 0000051C                 smlal            SUM1LL, SUM1LH, VLO, CF1
  291 0000051C         
  292 0000051C                 MEND                         ; MC1M
  293 0000051C         
  294 0000051C         ; MC2M - process 2 taps, 2 samples
  295 0000051C         ;   x = vb1 offset
  296 0000051C                 MACRO
  297 0000051C                 MC2M             $x
  298 0000051C         
  299 0000051C         ; load data as far as possible in advance of using it
  300 0000051C                 ldr              CF1, [COEF], #4
  301 0000051C                 ldr              CF2, [COEF], #4
  302 0000051C                 ldr              VLO, [VB1, #(4*($x))]
  303 0000051C                 ldr              VHI, [VB1, #(4*(23 - $x))]
  304 0000051C         
  305 0000051C                 smlal            SUM1LL, SUM1LH, VLO, CF1
  306 0000051C                 smlal            SUM2LL, SUM2LH, VLO, CF2
  307 0000051C                 rsb              CF2, CF2, #0
  308 0000051C                 smlal            SUM1LL, SUM1LH, VHI, CF2
  309 0000051C                 smlal            SUM2LL, SUM2LH, VHI, CF1
  310 0000051C         
  311 0000051C                 MEND                         ; MC2M
  312 0000051C         
  313 0000051C         ; void PolyphaseMono(short *pcm, int *vbuf, const int *c
                       oefBase)
  314 0000051C         
  315 0000051C         PolyphaseMono
                               FUNCTION



ARM Macro Assembler    Page 15 


  316 0000051C                 EXPORT           PolyphaseMono
  317 0000051C         
  318 0000051C E92D 4FF0       stmfd            sp!, {r4-r11, r14}
  319 00000520         
  320 00000520         ; clear out stack space for 4 local variables (4 bytes e
                       ach)
  321 00000520 B082            sub              sp, sp, #8
  322 00000522 9001            str              PCM, [sp, #4] ; sp[1] = pcm poi
                                                            nter
  323 00000524         
  324 00000524         ; special case, output sample 0
  325 00000524 F04F 7400       mov              SUM1LL, #RNDVAL ; load rndVal (
                                                            low 32)
  326 00000528 F04F 0500       mov              SUM1LH, #0
  327 0000052C         
  328 0000052C                 MC0M             0
  271 0000052C         
  272 0000052C F852 CB04       ldr              CF1, [COEF], #4
  273 00000530 F852 EB04       ldr              CF2, [COEF], #4
  274 00000534 6808            ldr              VLO, [VB1, #(4*(0))]
  275 00000536 6DCB            ldr              VHI, [VB1, #(4*(23 - 0))]
  276 00000538         
  277 00000538 F1CE 0E00       rsb              CF2, CF2, #0
  278 0000053C FBC0 450C       smlal            SUM1LL, SUM1LH, VLO, CF1
  279 00000540 FBC3 450E       smlal            SUM1LL, SUM1LH, VHI, CF2
  280 00000544         
  329 00000544                 MC0M             1
  271 00000544         
  272 00000544 F852 CB04       ldr              CF1, [COEF], #4
  273 00000548 F852 EB04       ldr              CF2, [COEF], #4
  274 0000054C 6848            ldr              VLO, [VB1, #(4*(1))]
  275 0000054E 6D8B            ldr              VHI, [VB1, #(4*(23 - 1))]
  276 00000550         
  277 00000550 F1CE 0E00       rsb              CF2, CF2, #0
  278 00000554 FBC0 450C       smlal            SUM1LL, SUM1LH, VLO, CF1
  279 00000558 FBC3 450E       smlal            SUM1LL, SUM1LH, VHI, CF2
  280 0000055C         
  330 0000055C                 MC0M             2
  271 0000055C         
  272 0000055C F852 CB04       ldr              CF1, [COEF], #4
  273 00000560 F852 EB04       ldr              CF2, [COEF], #4
  274 00000564 6888            ldr              VLO, [VB1, #(4*(2))]
  275 00000566 6D4B            ldr              VHI, [VB1, #(4*(23 - 2))]
  276 00000568         
  277 00000568 F1CE 0E00       rsb              CF2, CF2, #0
  278 0000056C FBC0 450C       smlal            SUM1LL, SUM1LH, VLO, CF1
  279 00000570 FBC3 450E       smlal            SUM1LL, SUM1LH, VHI, CF2
  280 00000574         
  331 00000574                 MC0M             3
  271 00000574         
  272 00000574 F852 CB04       ldr              CF1, [COEF], #4
  273 00000578 F852 EB04       ldr              CF2, [COEF], #4
  274 0000057C 68C8            ldr              VLO, [VB1, #(4*(3))]
  275 0000057E 6D0B            ldr              VHI, [VB1, #(4*(23 - 3))]
  276 00000580         
  277 00000580 F1CE 0E00       rsb              CF2, CF2, #0
  278 00000584 FBC0 450C       smlal            SUM1LL, SUM1LH, VLO, CF1
  279 00000588 FBC3 450E       smlal            SUM1LL, SUM1LH, VHI, CF2
  280 0000058C         



ARM Macro Assembler    Page 16 


  332 0000058C                 MC0M             4
  271 0000058C         
  272 0000058C F852 CB04       ldr              CF1, [COEF], #4
  273 00000590 F852 EB04       ldr              CF2, [COEF], #4
  274 00000594 6908            ldr              VLO, [VB1, #(4*(4))]
  275 00000596 6CCB            ldr              VHI, [VB1, #(4*(23 - 4))]
  276 00000598         
  277 00000598 F1CE 0E00       rsb              CF2, CF2, #0
  278 0000059C FBC0 450C       smlal            SUM1LL, SUM1LH, VLO, CF1
  279 000005A0 FBC3 450E       smlal            SUM1LL, SUM1LH, VHI, CF2
  280 000005A4         
  333 000005A4                 MC0M             5
  271 000005A4         
  272 000005A4 F852 CB04       ldr              CF1, [COEF], #4
  273 000005A8 F852 EB04       ldr              CF2, [COEF], #4
  274 000005AC 6948            ldr              VLO, [VB1, #(4*(5))]
  275 000005AE 6C8B            ldr              VHI, [VB1, #(4*(23 - 5))]
  276 000005B0         
  277 000005B0 F1CE 0E00       rsb              CF2, CF2, #0
  278 000005B4 FBC0 450C       smlal            SUM1LL, SUM1LH, VLO, CF1
  279 000005B8 FBC3 450E       smlal            SUM1LL, SUM1LH, VHI, CF2
  280 000005BC         
  334 000005BC                 MC0M             6
  271 000005BC         
  272 000005BC F852 CB04       ldr              CF1, [COEF], #4
  273 000005C0 F852 EB04       ldr              CF2, [COEF], #4
  274 000005C4 6988            ldr              VLO, [VB1, #(4*(6))]
  275 000005C6 6C4B            ldr              VHI, [VB1, #(4*(23 - 6))]
  276 000005C8         
  277 000005C8 F1CE 0E00       rsb              CF2, CF2, #0
  278 000005CC FBC0 450C       smlal            SUM1LL, SUM1LH, VLO, CF1
  279 000005D0 FBC3 450E       smlal            SUM1LL, SUM1LH, VHI, CF2
  280 000005D4         
  335 000005D4                 MC0M             7
  271 000005D4         
  272 000005D4 F852 CB04       ldr              CF1, [COEF], #4
  273 000005D8 F852 EB04       ldr              CF2, [COEF], #4
  274 000005DC 69C8            ldr              VLO, [VB1, #(4*(7))]
  275 000005DE 6C0B            ldr              VHI, [VB1, #(4*(23 - 7))]
  276 000005E0         
  277 000005E0 F1CE 0E00       rsb              CF2, CF2, #0
  278 000005E4 FBC0 450C       smlal            SUM1LL, SUM1LH, VLO, CF1
  279 000005E8 FBC3 450E       smlal            SUM1LL, SUM1LH, VHI, CF2
  280 000005EC         
  336 000005EC         
  337 000005EC 9801            ldr              PCM, [sp, #4] 
                                                            ; load pcm pointer
  338 000005EE F44F 4EFE       mov              MAXPOS, #0x7f00
  339 000005F2 F04E 0EFF       orr              MAXPOS, MAXPOS, #0xff
  340 000005F6         
  341 000005F6                 C64TOS           SUM1LL, SUM1LH, SIGN, MAXPOS
   73 000005F6         
   74 000005F6 EA4F 6494       mov              SUM1LL, SUM1LL, lsr #(20+6)
   75 000005FA EA44 1485       orr              SUM1LL, SUM1LL, SUM1LH, lsl #(1
2-6)
   76 000005FE EA4F 7CE4       mov              SIGN, SUM1LL, ASR #31
   77 00000602 EBBC 3FE4       cmp              SIGN, SUM1LL, ASR #15
   78 00000606 BF18 EA8C 
              040E             eorne            SUM1LL, SIGN, MAXPOS



ARM Macro Assembler    Page 17 


   79 0000060C         
  342 0000060C 8004            strh             SUM1LL, [PCM, #(2*0)]
  343 0000060E         
  344 0000060E         ; special case, output sample 16
  345 0000060E F502 7270       add              COEF, COEF, #(4*(256-16)) ; coe
                                                            f = coefBase + 256 
                                                            (was coefBase + 16 
                                                            after MC0M block)
  346 00000612 F501 5180       add              VB1, VB1, #(4*1024) ; vb1 = vbu
                                                            f + 64*16
  347 00000616         
  348 00000616 F04F 7400       mov              SUM1LL, #RNDVAL ; load rndVal (
                                                            low 32)
  349 0000061A F04F 0500       mov              SUM1LH, #0
  350 0000061E         
  351 0000061E                 MC1M             0
  287 0000061E         
  288 0000061E F852 CB04       ldr              CF1, [COEF], #4
  289 00000622 6808            ldr              VLO, [VB1, #(4*(0))]
  290 00000624 FBC0 450C       smlal            SUM1LL, SUM1LH, VLO, CF1
  291 00000628         
  352 00000628                 MC1M             1
  287 00000628         
  288 00000628 F852 CB04       ldr              CF1, [COEF], #4
  289 0000062C 6848            ldr              VLO, [VB1, #(4*(1))]
  290 0000062E FBC0 450C       smlal            SUM1LL, SUM1LH, VLO, CF1
  291 00000632         
  353 00000632                 MC1M             2
  287 00000632         
  288 00000632 F852 CB04       ldr              CF1, [COEF], #4
  289 00000636 6888            ldr              VLO, [VB1, #(4*(2))]
  290 00000638 FBC0 450C       smlal            SUM1LL, SUM1LH, VLO, CF1
  291 0000063C         
  354 0000063C                 MC1M             3
  287 0000063C         
  288 0000063C F852 CB04       ldr              CF1, [COEF], #4
  289 00000640 68C8            ldr              VLO, [VB1, #(4*(3))]
  290 00000642 FBC0 450C       smlal            SUM1LL, SUM1LH, VLO, CF1
  291 00000646         
  355 00000646                 MC1M             4
  287 00000646         
  288 00000646 F852 CB04       ldr              CF1, [COEF], #4
  289 0000064A 6908            ldr              VLO, [VB1, #(4*(4))]
  290 0000064C FBC0 450C       smlal            SUM1LL, SUM1LH, VLO, CF1
  291 00000650         
  356 00000650                 MC1M             5
  287 00000650         
  288 00000650 F852 CB04       ldr              CF1, [COEF], #4
  289 00000654 6948            ldr              VLO, [VB1, #(4*(5))]
  290 00000656 FBC0 450C       smlal            SUM1LL, SUM1LH, VLO, CF1
  291 0000065A         
  357 0000065A                 MC1M             6
  287 0000065A         
  288 0000065A F852 CB04       ldr              CF1, [COEF], #4
  289 0000065E 6988            ldr              VLO, [VB1, #(4*(6))]
  290 00000660 FBC0 450C       smlal            SUM1LL, SUM1LH, VLO, CF1
  291 00000664         
  358 00000664                 MC1M             7
  287 00000664         



ARM Macro Assembler    Page 18 


  288 00000664 F852 CB04       ldr              CF1, [COEF], #4
  289 00000668 69C8            ldr              VLO, [VB1, #(4*(7))]
  290 0000066A FBC0 450C       smlal            SUM1LL, SUM1LH, VLO, CF1
  291 0000066E         
  359 0000066E         
  360 0000066E 9801            ldr              PCM, [sp, #4] 
                                                            ; load pcm pointer
  361 00000670 F44F 4EFE       mov              MAXPOS, #0x7f00
  362 00000674 F04E 0EFF       orr              MAXPOS, MAXPOS, #0xff
  363 00000678         
  364 00000678                 C64TOS           SUM1LL, SUM1LH, SIGN, MAXPOS
   73 00000678         
   74 00000678 EA4F 6494       mov              SUM1LL, SUM1LL, lsr #(20+6)
   75 0000067C EA44 1485       orr              SUM1LL, SUM1LL, SUM1LH, lsl #(1
2-6)
   76 00000680 EA4F 7CE4       mov              SIGN, SUM1LL, ASR #31
   77 00000684 EBBC 3FE4       cmp              SIGN, SUM1LL, ASR #15
   78 00000688 BF18 EA8C 
              040E             eorne            SUM1LL, SIGN, MAXPOS
   79 0000068E         
  365 0000068E         
  366 0000068E 8404            strh             SUM1LL, [PCM, #(2*16)]
  367 00000690         
  368 00000690         ; main convolution loop: sum1L = samples 1, 2, 3, ... 15
                          sum2L = samples 31, 30, ... 17
  369 00000690 F5A2 7278       sub              COEF, COEF, #(4*(264-16)) ; coe
                                                            f = coefBase + 16 (
                                                            was coefBase + 264 
                                                            after MC1M block)
  370 00000694 F5A1 6170       sub              VB1, VB1, #(4*(1024-64)) ; vb1 
                                                            = vbuf + 64 (was vb
                                                            uf + 64*16 after MC
                                                            1M block)
  371 00000698 F04F 0C0F       mov              I, #15      ; loop counter, cou
                                                            nt down
  372 0000069C F100 0002       add              PCM, PCM, #(2) ; pcm++
  373 000006A0         
  374 000006A0         LoopPM
  375 000006A0 F8CD C000       str              I, [sp, #0] ; sp[0] = i (loop c
                                                            ounter)
  376 000006A4 9001            str              PCM, [sp, #4] ; sp[1] = pcm (po
                                                            inter to pcm buffer
                                                            )
  377 000006A6         
  378 000006A6 F04F 7400       mov              SUM1LL, #RNDVAL ; load rndVal (
                                                            low 32)
  379 000006AA F04F 7600       mov              SUM2LL, #RNDVAL ; load rndVal (
                                                            low 32)
  380 000006AE F04F 0500       mov              SUM1LH, #0
  381 000006B2 F04F 0700       mov              SUM2LH, #0
  382 000006B6         
  383 000006B6                 MC2M             0
  298 000006B6         
  299 000006B6         ; load data as far as possible in advance of using it
  300 000006B6 F852 CB04       ldr              CF1, [COEF], #4
  301 000006BA F852 EB04       ldr              CF2, [COEF], #4
  302 000006BE 6808            ldr              VLO, [VB1, #(4*(0))]
  303 000006C0 6DCB            ldr              VHI, [VB1, #(4*(23 - 0))]
  304 000006C2         



ARM Macro Assembler    Page 19 


  305 000006C2 FBC0 450C       smlal            SUM1LL, SUM1LH, VLO, CF1
  306 000006C6 FBC0 670E       smlal            SUM2LL, SUM2LH, VLO, CF2
  307 000006CA F1CE 0E00       rsb              CF2, CF2, #0
  308 000006CE FBC3 450E       smlal            SUM1LL, SUM1LH, VHI, CF2
  309 000006D2 FBC3 670C       smlal            SUM2LL, SUM2LH, VHI, CF1
  310 000006D6         
  384 000006D6                 MC2M             1
  298 000006D6         
  299 000006D6         ; load data as far as possible in advance of using it
  300 000006D6 F852 CB04       ldr              CF1, [COEF], #4
  301 000006DA F852 EB04       ldr              CF2, [COEF], #4
  302 000006DE 6848            ldr              VLO, [VB1, #(4*(1))]
  303 000006E0 6D8B            ldr              VHI, [VB1, #(4*(23 - 1))]
  304 000006E2         
  305 000006E2 FBC0 450C       smlal            SUM1LL, SUM1LH, VLO, CF1
  306 000006E6 FBC0 670E       smlal            SUM2LL, SUM2LH, VLO, CF2
  307 000006EA F1CE 0E00       rsb              CF2, CF2, #0
  308 000006EE FBC3 450E       smlal            SUM1LL, SUM1LH, VHI, CF2
  309 000006F2 FBC3 670C       smlal            SUM2LL, SUM2LH, VHI, CF1
  310 000006F6         
  385 000006F6                 MC2M             2
  298 000006F6         
  299 000006F6         ; load data as far as possible in advance of using it
  300 000006F6 F852 CB04       ldr              CF1, [COEF], #4
  301 000006FA F852 EB04       ldr              CF2, [COEF], #4
  302 000006FE 6888            ldr              VLO, [VB1, #(4*(2))]
  303 00000700 6D4B            ldr              VHI, [VB1, #(4*(23 - 2))]
  304 00000702         
  305 00000702 FBC0 450C       smlal            SUM1LL, SUM1LH, VLO, CF1
  306 00000706 FBC0 670E       smlal            SUM2LL, SUM2LH, VLO, CF2
  307 0000070A F1CE 0E00       rsb              CF2, CF2, #0
  308 0000070E FBC3 450E       smlal            SUM1LL, SUM1LH, VHI, CF2
  309 00000712 FBC3 670C       smlal            SUM2LL, SUM2LH, VHI, CF1
  310 00000716         
  386 00000716                 MC2M             3
  298 00000716         
  299 00000716         ; load data as far as possible in advance of using it
  300 00000716 F852 CB04       ldr              CF1, [COEF], #4
  301 0000071A F852 EB04       ldr              CF2, [COEF], #4
  302 0000071E 68C8            ldr              VLO, [VB1, #(4*(3))]
  303 00000720 6D0B            ldr              VHI, [VB1, #(4*(23 - 3))]
  304 00000722         
  305 00000722 FBC0 450C       smlal            SUM1LL, SUM1LH, VLO, CF1
  306 00000726 FBC0 670E       smlal            SUM2LL, SUM2LH, VLO, CF2
  307 0000072A F1CE 0E00       rsb              CF2, CF2, #0
  308 0000072E FBC3 450E       smlal            SUM1LL, SUM1LH, VHI, CF2
  309 00000732 FBC3 670C       smlal            SUM2LL, SUM2LH, VHI, CF1
  310 00000736         
  387 00000736                 MC2M             4
  298 00000736         
  299 00000736         ; load data as far as possible in advance of using it
  300 00000736 F852 CB04       ldr              CF1, [COEF], #4
  301 0000073A F852 EB04       ldr              CF2, [COEF], #4
  302 0000073E 6908            ldr              VLO, [VB1, #(4*(4))]
  303 00000740 6CCB            ldr              VHI, [VB1, #(4*(23 - 4))]
  304 00000742         
  305 00000742 FBC0 450C       smlal            SUM1LL, SUM1LH, VLO, CF1
  306 00000746 FBC0 670E       smlal            SUM2LL, SUM2LH, VLO, CF2
  307 0000074A F1CE 0E00       rsb              CF2, CF2, #0



ARM Macro Assembler    Page 20 


  308 0000074E FBC3 450E       smlal            SUM1LL, SUM1LH, VHI, CF2
  309 00000752 FBC3 670C       smlal            SUM2LL, SUM2LH, VHI, CF1
  310 00000756         
  388 00000756                 MC2M             5
  298 00000756         
  299 00000756         ; load data as far as possible in advance of using it
  300 00000756 F852 CB04       ldr              CF1, [COEF], #4
  301 0000075A F852 EB04       ldr              CF2, [COEF], #4
  302 0000075E 6948            ldr              VLO, [VB1, #(4*(5))]
  303 00000760 6C8B            ldr              VHI, [VB1, #(4*(23 - 5))]
  304 00000762         
  305 00000762 FBC0 450C       smlal            SUM1LL, SUM1LH, VLO, CF1
  306 00000766 FBC0 670E       smlal            SUM2LL, SUM2LH, VLO, CF2
  307 0000076A F1CE 0E00       rsb              CF2, CF2, #0
  308 0000076E FBC3 450E       smlal            SUM1LL, SUM1LH, VHI, CF2
  309 00000772 FBC3 670C       smlal            SUM2LL, SUM2LH, VHI, CF1
  310 00000776         
  389 00000776                 MC2M             6
  298 00000776         
  299 00000776         ; load data as far as possible in advance of using it
  300 00000776 F852 CB04       ldr              CF1, [COEF], #4
  301 0000077A F852 EB04       ldr              CF2, [COEF], #4
  302 0000077E 6988            ldr              VLO, [VB1, #(4*(6))]
  303 00000780 6C4B            ldr              VHI, [VB1, #(4*(23 - 6))]
  304 00000782         
  305 00000782 FBC0 450C       smlal            SUM1LL, SUM1LH, VLO, CF1
  306 00000786 FBC0 670E       smlal            SUM2LL, SUM2LH, VLO, CF2
  307 0000078A F1CE 0E00       rsb              CF2, CF2, #0
  308 0000078E FBC3 450E       smlal            SUM1LL, SUM1LH, VHI, CF2
  309 00000792 FBC3 670C       smlal            SUM2LL, SUM2LH, VHI, CF1
  310 00000796         
  390 00000796                 MC2M             7
  298 00000796         
  299 00000796         ; load data as far as possible in advance of using it
  300 00000796 F852 CB04       ldr              CF1, [COEF], #4
  301 0000079A F852 EB04       ldr              CF2, [COEF], #4
  302 0000079E 69C8            ldr              VLO, [VB1, #(4*(7))]
  303 000007A0 6C0B            ldr              VHI, [VB1, #(4*(23 - 7))]
  304 000007A2         
  305 000007A2 FBC0 450C       smlal            SUM1LL, SUM1LH, VLO, CF1
  306 000007A6 FBC0 670E       smlal            SUM2LL, SUM2LH, VLO, CF2
  307 000007AA F1CE 0E00       rsb              CF2, CF2, #0
  308 000007AE FBC3 450E       smlal            SUM1LL, SUM1LH, VHI, CF2
  309 000007B2 FBC3 670C       smlal            SUM2LL, SUM2LH, VHI, CF1
  310 000007B6         
  391 000007B6         
  392 000007B6 F501 7180       add              VB1, VB1, #(4*64) ; vb1 += 64
  393 000007BA         
  394 000007BA 9801            ldr              PCM, [sp, #4] 
                                                            ; load pcm pointer
  395 000007BC F44F 4EFE       mov              MAXPOS, #0x7f00
  396 000007C0 F04E 0EFF       orr              MAXPOS, MAXPOS, #0xff
  397 000007C4         
  398 000007C4                 C64TOS           SUM1LL, SUM1LH, SIGN, MAXPOS
   73 000007C4         
   74 000007C4 EA4F 6494       mov              SUM1LL, SUM1LL, lsr #(20+6)
   75 000007C8 EA44 1485       orr              SUM1LL, SUM1LL, SUM1LH, lsl #(1
2-6)
   76 000007CC EA4F 7CE4       mov              SIGN, SUM1LL, ASR #31



ARM Macro Assembler    Page 21 


   77 000007D0 EBBC 3FE4       cmp              SIGN, SUM1LL, ASR #15
   78 000007D4 BF18 EA8C 
              040E             eorne            SUM1LL, SIGN, MAXPOS
   79 000007DA         
  399 000007DA                 C64TOS           SUM2LL, SUM2LH, SIGN, MAXPOS
   73 000007DA         
   74 000007DA EA4F 6696       mov              SUM2LL, SUM2LL, lsr #(20+6)
   75 000007DE EA46 1687       orr              SUM2LL, SUM2LL, SUM2LH, lsl #(1
2-6)
   76 000007E2 EA4F 7CE6       mov              SIGN, SUM2LL, ASR #31
   77 000007E6 EBBC 3FE6       cmp              SIGN, SUM2LL, ASR #15
   78 000007EA BF18 EA8C 
              060E             eorne            SUM2LL, SIGN, MAXPOS
   79 000007F0         
  400 000007F0         
  401 000007F0 F8DD C000       ldr              I, [sp, #0] ; load loop counter
                                                            
  402 000007F4 EB00 0E8C       add              CF2, PCM, I, lsl #2 ; CF2 = PCM
                                                             + 2*i (short offse
                                                            t)
  403 000007F8 F82E 6B02       strh             SUM2LL, [CF2], #2 
                                                            ; *(pcm + 2*i + 0)
  404 000007FC F820 4B02       strh             SUM1LL, [PCM], #2 ; *(pcm + 0) 
                                                            ; pcm++
  405 00000800         
  406 00000800 F1BC 0C01       subs             I, I, #1
  407 00000804 F47F AF4C       bne              LoopPM
  408 00000808         
  409 00000808         ; restore stack pointer
  410 00000808 B002            add              sp, sp, #8
  411 0000080A         
  412 0000080A E8BD 8FF0       ldmfd            sp!, {r4-r11, pc}
  413 0000080E                 ENDFUNC
  414 0000080E         
  415 0000080E                 END
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M3 --apcs=interw
ork --depend=.\objects\asmpoly.d -o.\objects\asmpoly.o -I.\RTE\_Target_1 -ID:\P
rograms\Keil_v5\ARM\PACK\ARM\CMSIS\5.9.0\CMSIS\Core\Include -ID:\Programs\Keil_
v5\ARM\PACK\Atmel\SAM3X_DFP\1.0.50\include -ID:\Programs\Keil_v5\ARM\PACK\Keil\
SAM3_DFP\1.2.2\Device\SAM3XA\Include -ID:\Programs\Keil_v5\ARM\PACK\Atmel\SAM3X
_DFP\1.0.50\Device\SAM3XA\Include --predefine="__UVISION_VERSION SETA 538" --pr
edefine="_RTE_ SETA 1" --predefine="_RTE_ SETA 1" --predefine="__SAM3X8E__ SETA
 1" --list=.\asmpoly.lst Helix\asmpoly.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 36 in file Helix\asmpoly.s
   Uses
      None
Comment: .text unused
LoopPM 000006A0

Symbol: LoopPM
   Definitions
      At line 374 in file Helix\asmpoly.s
   Uses
      At line 407 in file Helix\asmpoly.s
Comment: LoopPM used once
LoopPS 0000028A

Symbol: LoopPS
   Definitions
      At line 214 in file Helix\asmpoly.s
   Uses
      At line 257 in file Helix\asmpoly.s
Comment: LoopPS used once
PolyphaseMono 0000051C

Symbol: PolyphaseMono
   Definitions
      At line 315 in file Helix\asmpoly.s
   Uses
      At line 316 in file Helix\asmpoly.s
Comment: PolyphaseMono used once
PolyphaseStereo 00000000

Symbol: PolyphaseStereo
   Definitions
      At line 146 in file Helix\asmpoly.s
   Uses
      At line 147 in file Helix\asmpoly.s
Comment: PolyphaseStereo used once
5 symbols
357 symbols in table
